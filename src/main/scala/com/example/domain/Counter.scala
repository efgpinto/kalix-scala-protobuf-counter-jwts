/* This code was generated by Kalix tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package com.example.domain

import kalix.scalasdk.valueentity.ValueEntity
import kalix.scalasdk.valueentity.ValueEntityContext
import com.example.{ChangeCounterCmd, CounterState, CurrentCounter, GetCounter}
import com.google.protobuf.empty.Empty
import org.slf4j.LoggerFactory

class Counter(context: ValueEntityContext) extends AbstractCounter {

  private val log = LoggerFactory.getLogger("com.example.Counter")

  override def emptyState: CounterState = CounterState()

  override def increase(currentState: CounterState, command: ChangeCounterCmd): ValueEntity.Effect[Empty] = {
    log.info("metadata: " + commandContext().metadata.jwtClaims.asMap) // used for debug purposes
    log.info("command: " + command)
    if (command.value < 0)
      effects.error(s"Increase requires a positive value. It was [${command.value}].")
    else {
      val newState = currentState.copy(value = currentState.value + command.value)
      effects
        .updateState(newState)
        .thenReply(Empty.defaultInstance)
    }
  }

  override def decrease(currentState: CounterState, command: ChangeCounterCmd): ValueEntity.Effect[Empty] = {
    log.info("metadata: " + commandContext().metadata.jwtClaims.asMap) // used for debug purposes
    log.info("command: " + command)
    if (command.value < 0) effects.error(s"Decrease requires a positive value. It was [${command.value}].")
    else
      effects
        .updateState(currentState.copy(value = currentState.value - command.value))
        .thenReply(Empty.defaultInstance)
  }

  override def getCurrentCounter(
      currentState: CounterState,
      command: GetCounter): ValueEntity.Effect[CurrentCounter] = {
    log.info("metadata: " + commandContext().metadata.jwtClaims.asMap) // used for debug purposes
    log.info("command: " + command)
    effects.reply(CurrentCounter(currentState.value))
  }

}
